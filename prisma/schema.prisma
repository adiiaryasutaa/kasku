generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(50)
  email             String             @unique @db.VarChar(255)
  avatar            String?            @db.VarChar(255)
  approvals         Approval[]
  transactions      Transaction[]
  organizations     Organization[]
  userOrganizations UserOrganization[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")
}

model Category {
  id             BigInt        @id @default(autoincrement())
  name           String
  type           Int           @db.SmallInt // 1: income, 2: expense // 3: both
  description    String?
  organizationId BigInt        @map("organization_id")
  organization   Organization  @relation(fields: [organizationId], references: [id])
  transactions   Transaction[]
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @map("updated_at")
  deletedAt      DateTime?     @map("deleted_at")

  @@index([organizationId])
}

model Approval {
  id            BigInt      @id @default(autoincrement())
  transactionId BigInt      @unique @map("transaction_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  userId        String      @map("user_id")
  user          User        @relation(fields: [userId], references: [id])
  status        Int         @db.SmallInt // 1: pending, 2: approved, 3: rejected
  reason        String?     @db.Text
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")

  @@index([transactionId])
  @@index([userId])
}

model Transaction {
  id             BigInt       @id @default(autoincrement())
  organizationId BigInt       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String       @db.VarChar(255)
  description    String?      @db.Text
  amount         BigInt       @db.BigInt
  type           Int          @db.SmallInt // 1: income, 2: expense
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id])
  attachments    String[]
  categoryId     BigInt       @map("category_id")
  category       Category     @relation(fields: [categoryId], references: [id])
  date           DateTime
  approval       Approval?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@index([categoryId])
  @@index([organizationId])
  @@index([userId])
}

model Role {
  id                BigInt             @id @default(autoincrement())
  organizationId    BigInt             @map("organization_id")
  organization      Organization       @relation(fields: [organizationId], references: [id])
  name              String             @db.VarChar(255)
  description       String             @db.VarChar(255)
  isDefault         Boolean?           @default(false)
  permanent         Boolean?           @default(false)
  userOrganizations UserOrganization[]
  permissions       RolePermission[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")

  @@index([organizationId])
}

model RolePermission {
  id         BigInt    @id @default(autoincrement())
  roleId     BigInt    @map("role_id")
  role       Role      @relation(fields: [roleId], references: [id])
  permission Int       @db.SmallInt
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@index([roleId])
}

model UserOrganization {
  id             BigInt       @id @default(autoincrement())
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id])
  organizationId BigInt       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  roleId         BigInt       @map("role_id")
  role           Role         @relation(fields: [roleId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@index([organizationId])
  @@index([roleId])
  @@index([userId])
}

model Organization {
  id                BigInt             @id @default(autoincrement())
  slug              String             @db.VarChar(255)
  userId            String             @map("user_id")
  user              User               @relation(fields: [userId], references: [id])
  name              String             @db.VarChar(255)
  description       String?            @db.VarChar(255)
  avatar            String?            @db.VarChar(255)
  currency          String?            @default("USD") @db.VarChar(3)
  yearStart         DateTime?          @default(now()) @map("year_start") @db.Date
  balance           BigInt?            @default(0)
  permanent         Boolean?           @default(false)
  categories        Category[]
  transactions      Transaction[]
  roles             Role[]
  userOrganizations UserOrganization[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")

  @@index([userId])
}
